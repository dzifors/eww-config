(defwidget bar []
  (centerbox :orientation "h" :class "bar"
    (workspaces)
    (window_w)
    (sidestuff2)
    ))

(defwidget sidestuff []
  (box :class "sidestuff" :orientation "h" :space-evenly false :halign "end"
    (metric :label "ðŸ”Š"
            :value volume
            :onchange "amixer -D pulse sset Master {}%")
    (metric :label "ï¡š"
            :value {EWW_RAM.used_mem_perc}
            :onchange "")
    (metric :label "ðŸ’¾"
            :value {round((1 - (EWW_DISK["/"].free / EWW_DISK["/"].total)) * 100, 0)}
            :onchange "")
    time))

(defwidget sidestuff2 []
  (box :class "sidestuff" :orientation "h" :space-evenly false :halign "end" :spacing 15
  (music)
  (cpu-temp)
  (battery)
    time
    
  (systray)))

(defwidget cpu-temp []
	(label :class "cpu-temp" :text "CPU: ${EWW_TEMPS.CORETEMP_PACKAGE_ID_0} Â°C")
)

(defpoll battery-icon :interval "1s" "scripts/battery icon")
(defpoll battery-percentage :interval "1s" "scripts/battery percentage")
(defpoll battery-status :interval "1s" "upower -i /org/freedesktop/UPower/devices/battery_BAT1 | grep time")
(defwidget battery []
	(box :space-evenly "false"
		(label :class "battery" :halign "end" :text "BAT: ${battery-percentage}%" :tooltip battery-status)
	)
)

(deflisten workspaces :initial "[]" "bash ~/.config/eww/scripts/get-workspaces")
(deflisten current_workspace :initial "1" "bash ~/.config/eww/scripts/get-active-workspace")
(defwidget workspaces []
    (box :space-evenly false
      (label :text "${workspaces}${current_workspace}" :visible false)
      (for workspace in workspaces
        (eventbox :onclick "hyprctl dispatch workspace ${workspace.id}"
          (box :class "workspace-entry ${workspace.id == current_workspace ? "current" : ""} ${workspace.windows > 0 ? "occupied" : "empty"}"
            (label :class "workspace-label" :text "${workspace.id}")
            )
          )
        )
    )
  )

(deflisten window :initial "..." "sh ~/.config/eww/scripts/get-window-title")
(defwidget window_w []
  (box
    (label :text "${window}"
    )
  )
  )

(defwidget music []
  (box :class "music"
       :orientation "h"
       :space-evenly true
       :halign "center"
    {music != "" ? "ðŸŽµ ${music}" : ""}))


(defwidget metric [label value onchange]
  (box :orientation "h"
       :class "metric"
       :space-evenly false
    (box :class "label" label)
    (scale :min 0
           :max 101
           :active {onchange != ""}
           :value value
           :onchange onchange)))



(deflisten music :initial ""
  "playerctl --follow metadata --format '{{ artist }} - {{ title }}' || true")

(defpoll volume :interval "1s"
  "scripts/getvol")

(defpoll time :interval "10s"
  "date '+%b %d, %Y %H:%M '")

(defwindow bar
  :monitor 1
  :windowtype "dock"
  :geometry (geometry :x "0%"
                      :y "0%"
                      :width "100%"
                      :height "10px"
                      :anchor "top center")
  :reserve (struts :side "top" :distance "4%")
  :stacking "fg"
  :exclusive true
  (bar))

(defwindow bar2
  :monitor 0
  :windowtype "dock"
  :geometry (geometry :x "0%"
                      :y "0%"
                      :width "100%"
                      :height "10px"
                      :anchor "top center")
  :reserve (struts :side "top" :distance "4%")
  :stacking "fg"
  :exclusive true
  (bar))
